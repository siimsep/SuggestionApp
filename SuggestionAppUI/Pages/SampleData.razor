@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData

<h3>SampleData</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>

}
@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>

}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    // for testing purposes
    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Siim",
                LastName = "Sample",
                EmailAddress = "siim@sample.com",
                DisplayName = "Siimsep",
                ObjectIdentifier = "abc-123"

            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
        {
            Author=new BasicUserModel(foundUser),
            Category=categories[0],
            Suggestion="First suggestion",
            Description="This is a suggestion"
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "our second suggestion",
                Description = "This is an another suggestion",
                SuggestionStatus = statuses[0],
                OwnerNotes= "some notes"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "our third suggestion",
                Description = "This is an another suggestion",
                SuggestionStatus = statuses[1],
                OwnerNotes = "some notes"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "our 4th suggestion",
                Description = "This is an another suggestion",
                SuggestionStatus = statuses[2],
                UserVotes=votes,
                OwnerNotes = "some notes"
            };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");
        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "our 5th suggestion",
                Description = "This is an another suggestion",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "some notes"
            };
        await suggestionData.CreateSuggestion(suggestion);

    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();
        if(categories?.Count > 0)
        {
            return;
        }
        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "full paid fourses"
        };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev questions",
                CategoryDescription = "Advice on being a developer"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-depth tutorials",
                CategoryDescription = "A deep dive video"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-minute training",
                CategoryDescription = "A quick video"
            };
        await categoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                CategoryDescription = "Not sure where this fits"
            };
        await categoryData.CreateCategory(cat);
        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();
        if(statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new()
        {StatusName="Completed", StatusDescription = "Suggestion accepted"};
        await statusData.CreateStatuses(stat);

        stat = new()
            { StatusName = "Watching", StatusDescription = "We are watching this" };
        await statusData.CreateStatuses(stat);

        stat = new()
            { StatusName = "Upcoming", StatusDescription = "Accepted, will be released soon" };
        await statusData.CreateStatuses(stat);

        stat = new()
            { StatusName = "Dismissed", StatusDescription = "Suggestion not accepted" };
        await statusData.CreateStatuses(stat);
        statusesCreated = true;
    }
}
